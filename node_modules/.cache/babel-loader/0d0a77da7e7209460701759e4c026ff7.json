{"ast":null,"code":"import Big from 'big.js';\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n}","map":{"version":3,"sources":["C:/Users/leona/Microverse/Module3/1week/math_magicians/src/logic/operate.js"],"names":["Big","operate","numberOne","numberTwo","operation","one","two","plus","toString","minus","times","div","err","mod","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,eAAe,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,SAAvC,EAAkD;AAC/D,QAAMC,GAAG,GAAGL,GAAG,CAACE,SAAD,CAAf;AACA,QAAMI,GAAG,GAAGN,GAAG,CAACG,SAAD,CAAf;;AACA,MAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACE,IAAJ,CAASD,GAAT,EAAcE,QAAd,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACI,KAAJ,CAAUH,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACK,KAAJ,CAAUJ,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,QAAI;AACF,aAAOC,GAAG,CAACM,GAAJ,CAAQL,GAAR,EAAaE,QAAb,EAAP;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,aAAO,oBAAP;AACD;AACF;;AACD,MAAIR,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACQ,GAAJ,CAAQP,GAAR,EAAaE,QAAb,EAAP;AACD;;AACD,QAAMM,KAAK,CAAE,sBAAqBV,SAAU,GAAjC,CAAX;AACD","sourcesContent":["import Big from 'big.js';\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  const one = Big(numberOne);\r\n  const two = Big(numberTwo);\r\n  if (operation === '+') {\r\n    return one.plus(two).toString();\r\n  }\r\n  if (operation === '-') {\r\n    return one.minus(two).toString();\r\n  }\r\n  if (operation === 'x') {\r\n    return one.times(two).toString();\r\n  }\r\n  if (operation === 'รท') {\r\n    try {\r\n      return one.div(two).toString();\r\n    } catch (err) {\r\n      return \"Can't divide by 0.\";\r\n    }\r\n  }\r\n  if (operation === '%') {\r\n    return one.mod(two).toString();\r\n  }\r\n  throw Error(`Unknown operation '${operation}'`);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}