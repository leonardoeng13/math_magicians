{"ast":null,"code":"import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:s      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\n\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        if (obj.next === '0') {\n          return { ...obj,\n            next: buttonName\n          };\n        }\n\n        return { ...obj,\n          next: obj.next + buttonName\n        };\n      }\n\n      return { ...obj,\n        next: buttonName\n      };\n    } // If there is no operation, update next and clear the value\n\n\n    if (obj.next) {\n      if (obj.next === '0') {\n        return {\n          next: buttonName,\n          total: null\n        };\n      }\n\n      return {\n        next: obj.next + buttonName,\n        total: null\n      };\n    }\n\n    return {\n      next: buttonName,\n      total: null\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj\n        };\n      }\n\n      return { ...obj,\n        next: `${obj.next}.`\n      };\n    }\n\n    if (obj.operation) {\n      return {\n        next: '0.'\n      };\n    }\n\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n\n      return {\n        total: `${obj.total}.`\n      };\n    }\n\n    return {\n      total: '0.'\n    };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null\n      };\n    } // '=' with no operation, nothing to do\n\n\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj,\n        next: (-1 * parseFloat(obj.next)).toString()\n      };\n    }\n\n    if (obj.total) {\n      return { ...obj,\n        total: (-1 * parseFloat(obj.total)).toString()\n      };\n    }\n\n    return {};\n  } // Button must be an operation\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n  // User pressed an operation after pressing '='\n\n\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj,\n      operation: buttonName\n    };\n  } // User pressed an operation button and there is an existing operation\n\n\n  if (obj.operation) {\n    if (obj.total !== (null || undefined) && !obj.next) {\n      return { ...obj,\n        operation: buttonName\n      };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName\n    };\n  } // no operation yet, but the user typed one\n  // The user hasn't typed a number yet, just save the operation\n\n\n  if (!obj.next) {\n    return { ...obj,\n      operation: buttonName\n    };\n  } // save the operation and shift 'next' into 'total'\n\n\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName\n  };\n}","map":{"version":3,"sources":["C:/Users/leona/Microverse/Module3/1week/math_magicians/src/logic/calculate.js"],"names":["operate","isNumber","item","match","calculate","obj","buttonName","total","next","operation","includes","parseFloat","toString","undefined"],"mappings":"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","sourcesContent":["import operate from './operate';\r\n\r\nfunction isNumber(item) {\r\n  return !!item.match(/[0-9]+/);\r\n}\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:s      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === 'AC') {\r\n    return {\r\n      total: 0,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        if (obj.next === '0') {\r\n          return { ...obj, next: buttonName };\r\n        }\r\n        return { ...obj, next: obj.next + buttonName };\r\n      }\r\n      return { ...obj, next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      if (obj.next === '0') {\r\n        return {\r\n          next: buttonName,\r\n          total: null,\r\n        };\r\n      }\r\n      return {\r\n        next: obj.next + buttonName,\r\n        total: null,\r\n      };\r\n    }\r\n\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === '.') {\r\n    if (obj.next) {\r\n      if (obj.next.includes('.')) {\r\n        return { ...obj };\r\n      }\r\n      return { ...obj, next: `${obj.next}.` };\r\n    }\r\n    if (obj.operation) {\r\n      return { next: '0.' };\r\n    }\r\n    if (obj.total) {\r\n      if (obj.total.includes('.')) {\r\n        return {};\r\n      }\r\n      return { total: `${obj.total}.` };\r\n    }\r\n    return { total: '0.' };\r\n  }\r\n\r\n  if (buttonName === '=') {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    }\r\n    // '=' with no operation, nothing to do\r\n    return {};\r\n  }\r\n\r\n  if (buttonName === '+/-') {\r\n    if (obj.next) {\r\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation after pressing '='\r\n  if (!obj.next && obj.total && !obj.operation) {\r\n    return { ...obj, operation: buttonName };\r\n  }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    if ((obj.total !== (null || undefined)) && !obj.next) {\r\n      return { ...obj, operation: buttonName };\r\n    }\r\n\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { ...obj, operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}